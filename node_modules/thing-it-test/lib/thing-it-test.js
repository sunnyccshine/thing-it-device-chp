module.exports = {
    createTestDriver: function (options) {
        return new TestDriver().initialize(options);
    }
};

var q = require('q');
var utils = require("./utils");
var logger = require("./logger");
var device = require("./device");
var discovery = require("./discovery");

/**
 *
 * @constructor
 */
function TestDriver() {
    this.class = "TestDriver";
    this.plugins = {};
    this.pendingDeviceRegistrations = {};
    this.listeners = [];

    utils.inheritMethods(this, logger.create());

    /**
     *
     */
    TestDriver.prototype.initialize = function (options) {
        this.logLevel = (options && options.logLevel) ? options.logLevel : "debug";

        return this;
    };

    /**
     *
     */
    TestDriver.prototype.registerDevicePlugin = function (path) {
        var devicePlugin = require(path).metadata;

        devicePlugin.modulePath = path;

        this.plugins[devicePlugin.family + "/" + devicePlugin.plugin] = devicePlugin;
    };

    /**
     *
     */
    TestDriver.prototype.registerUnitPlugin = function (path) {
        var unitPlugin = require(path).metadata;

        unitPlugin.modulePath = path;

        for (var l in unitPlugin.deviceTypes) {
            if (unitPlugin.role == "actor") {
                this.plugins[unitPlugin.deviceTypes[l]].actorTypes
                    .push(unitPlugin);
            } else if (unitPlugin.role == "sensor") {
                this.plugins[unitPlugin.deviceTypes[l]].sensorTypes
                    .push(unitPlugin);
            } else {
                throw "No role defined for Unit " + unitPath + ".";
            }
        }

        // Resolve Device Inheritance

        for (var n in this.plugins) {
            var subDevice = this.plugins[n];

            if (subDevice.superDevice && this.plugins[subDevice.superDevice]) {
                this.inheritFromSuperDevice(subDevice,
                    this.plugins[subDevice.superDevice]);
            }
        }
    };

    /**
     *
     * @param subDevice
     * @param superDevice
     */
    TestDriver.prototype.inheritFromSuperDevice = function (subDevice, superDevice) {
        // Inherit Types

        for (var n in superDevice.dataTypes) {
            if (!subDevice.dataTypes[n]) {
                subDevice.dataTypes[n] = superDevice.dataTypes[n];
            }
        }

        // Inherit Actor Types

        for (var n in superDevice.actorTypes) {
            if (!this.containsElementWithFieldValue(subDevice.actorTypes, "plugin",
                    superDevice.actorTypes[n].plugin)) {
                subDevice.actorTypes.push(superDevice.actorTypes[n]);
            }
        }

        // Inherit Sensor Types

        for (var n in superDevice.sensorTypes) {
            if (!this.containsElementWithFieldValue(subDevice.sensorTypes, "plugin",
                    superDevice.sensorTypes[n].plugin)) {
                subDevice.sensorTypes.push(superDevice.sensorTypes[n]);
            }
        }
    };

    /**
     *
     * @param array
     * @param field
     * @param value
     * @returns {boolean}
     */
    TestDriver.prototype.containsElementWithFieldValue = function (array, field, value) {
        for (var n in array) {
            if (array[n][field] == value) {
                return true;
            }
        }

        return false;
    };

    /**
     *
     */
    TestDriver.prototype.start = function (options) {
        this.autoDiscoveryDeviceTypes = options.configuration.autoDiscoveryDeviceTypes;
        this.devices = options.configuration.devices;
        this.heartbeat = options.heartbeat ? options.heartbeat * 1000 : 20000;
        this.simulated = options.simulated;

        this.heartbeatInterval = setInterval(function () {
            this.logInfo("Heartbeat");
        }.bind(this), this.heartbeat);

        // Start auto-discovery

        if (this.autoDiscoveryDeviceTypes) {
            for (var n in this.autoDiscoveryDeviceTypes) {
                discovery.create(this, this.autoDiscoveryDeviceTypes[n]).start();
                this.logDebug("Start Auto-Discovery for [" + this.autoDiscoveryDeviceTypes[n] + "]");
            }
        }

        for (var n in this.devices) {
            device.bind(this, this.devices[n]).startDevice();
        }

        var deferred = q.defer();

        deferred.resolve();

        return deferred.promise;
    };

    /**
     *
     */
    TestDriver.prototype.stop = function () {
        clearInterval(this.heartbeatInterval);

        for (var n in this.devices) {
            this.devices[n].stopDevice();
        }

        var deferred = q.defer();

        deferred.resolve();

        return deferred.promise;
    };

    /**
     *
     */
    TestDriver.prototype.addListener = function (listener) {
        this.listeners.push(listener);

        return this.listeners.length - 1;
    };

    /**
     *
     */
    TestDriver.prototype.removeAllListeners = function () {
        this.listeners = [];
    };

    /**
     *
     */
    TestDriver.prototype.publishMessage = function (message) {
        this.logInfo("Publishing message: " + message);

        for (var n in this.listeners) {
            if (this.listeners[n].publishMessage) {
                this.listeners[n].publishMessage(message);
            }
        }
    };

    /**
     *
     */
    TestDriver.prototype.isSimulated = function (message) {
        return this.simulated;
    };

    /**
     *
     */
    TestDriver.prototype.publishEvent = function (event) {
        this.logInfo("Publishing Event [" + event.type + "]: ", event);

        for (var n in this.listeners) {
            if (this.listeners[n].publishEvent) {
                this.listeners[n].publishEvent(event);
            }
        }
    };

    /**
     *
     */
    TestDriver.prototype.publishDeviceStateChange = function (device, state) {
        this.logInfo("Publishing State Change for Device [" + device.id + "]: ", state);

        for (var n in this.listeners) {
            if (this.listeners[n].publishDeviceStateChange) {
                this.listeners[n].publishDeviceStateChange(device.id, state);
            }
        }
    };

    /**
     *
     */
    TestDriver.prototype.publishActorStateChange = function (device, actor, state) {
        this.logInfo("Publishing State Change for Actor [" + actor.id + "] in Device [" + device.id + "]: ", state);

        for (var n in this.listeners) {
            if (this.listeners[n].publishActorStateChange) {
                this.listeners[n].publishActorStateChange(device, actor, state);
            }
        }
    };

    /**
     *
     */
    TestDriver.prototype.publishDeviceAdvertisement = function (device) {
        this.logInfo("Device Advertisement for Device [" + device.id + "].");

        for (var n in this.listeners) {
            if (this.listeners[n].publishDeviceAdvertisement) {
                this.listeners[n].publishDeviceAdvertisement(device);
            }
        }
    };

    /**
     *
     */
    TestDriver.prototype.publishDeviceRegistration = function (device) {
        this.logInfo("Device Registration for Device [" + device.id + "].");

        for (var n in this.listeners) {
            if (this.listeners[n].publishDeviceRegistration) {
                this.listeners[n].publishDeviceRegistration(device);
            }
        }
    };
}

