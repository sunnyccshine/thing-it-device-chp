{
  "name": "thing-it-test",
  "version": "0.0.15",
  "description": "Test and verification for all [thing-it-node] Plugins.",
  "authors": "Marc Gille",
  "license": "MIT, EPL",
  "keywords": [
    "IoT",
    "thing-it",
    "test"
  ],
  "main": "lib/thing-it-test.js",
  "dependencies": {
    "lodash": "^3.10.1",
    "moment": "^2.10.6",
    "q": "^1.4.1"
  },
  "readme": "# thing-it-test\n\n[![NPM](https://nodei.co/npm/thing-it-test.png)](https://nodei.co/npm/thing-it-test/)\n[![NPM](https://nodei.co/npm-dl/thing-it-test.png)](https://nodei.co/npm/thing-it-test/)\n\nTest and verification utility for [[thing-it-node]](https://github.com/marcgille/thing-it-node) Plugin development.\n\n## Device, Sensor and Actor Test\n\n### Setting up a Test\n\nInstall the package via\n\n```\nnpm install thing-it-test\n```\n\nin the directory of your [[thing-it-node]](https://github.com/marcgille/thing-it-node) Plugin.\n\nIn your test program load the [thing-it] Test Driver\n\n```\nvar testDriver = require(\"thing-it-test\").createTestDriver({logLevel: \"debug\"});\n```\n\nLoad your Device, Actor and Sensor Plugins, e.g.\n\n```\ntestDriver.registerDevicePlugin(__dirname + \"/dummyDevice\");\ntestDriver.registerUnitPlugin(__dirname + \"/dummyActor\");\ntestDriver.registerUnitPlugin(__dirname + \"/dummySensor\");\n```\n\n- note that you need to load Device Plugins before Unit Plugins - and create your configuration\n\n```\nvar testConfiguration = {\n    label: \"Room 22\",\n    id: \"room22\",\n    devices: [{\n        id: \"dummyDevice1\",\n        label: \"Dummy Device 1\",\n        plugin: \"dummy-device/dummyDevice\",\n        logLevel: \"debug\",\n        configuration: {simulated: true, frequency: 5},\n        actors: [{\n            id: \"dummyActor1\",\n            label: \"Dummy Actor 1\",\n            type: \"dummyActor\",\n            logLevel: \"debug\",\n            configuration: {\n            }\n        }],\n        sensors: [{\n            id: \"dummySensor1\",\n            label: \"Dummy Sensor 1\",\n            type: \"dummySensor\",\n            logLevel: \"debug\",\n            configuration: {\n                frequency: 5\n            }\n        }]\n    }]\n};\n```\n\nYou can also load the configuration via **require**, e.g.\n\n```\nvar testConfiguration = require(\"./dummyConfiguration\")\n```\n\nThen run the test, e.g.\n\n```\ntestDriver.start({\n    configuration: testConfiguration,\n    heartbeat: 10,\n    simulated: true\n}).then(function () {\n    setTimeout(function () {\n        testDriver.dummyDevice1.dummyActor1.on();\n        testDriver.dummyDevice1.dummyActor1.off();\n        testDriver.dummyDevice1.dummyActor1.toggle();\n\n        testDriver.stop().then(function () {\n        }).fail(function (error) {\n            testDriver.logError(\"Could not stop Device: \" + error);\n        });\n    }, 20000);\n}).fail(function (error) {\n    testDriver.logError(\"Could not start Device: \" + error);\n});\n```\n\nFind a full example [here](https://github.com/marcgille/thing-it-test/test).\n\n### Using mocha\n\nIf you have installed mocha via\n\n```\nnpm install mocha -g\n```\n\nyou can define tests like\n\n```\ndescribe('[thing-it] Philips Hue Plugin', function () {\n    var testDriver;\n\n    before(function () {\n        testDriver = require(\"thing-it-test\").createTestDriver();\n\n        testDriver.registerDevicePlugin(__dirname + \"/../hueBridge\");\n        testDriver.registerUnitPlugin(__dirname + \"/../default-units/lightBulb\");\n        testDriver.registerUnitPlugin(__dirname + \"/../default-units/livingColorLamp\");\n    });\n    describe('Start Configuration', function () {\n        this.timeout(5000);\n\n        it('should complete without error', function () {\n            return testDriver.start({\n                configuration: require(\"../examples/configuration.js\"),\n                heartbeat: 10,\n                logLevel: \"error\"\n            });\n        });\n    });\n    describe('Service calls', function () {\n        it('should complete without error', function (done) {\n            testDriver.philipsHueBridge.lightBulbBedroom.setBrightnessPercent({brightnessPercent: 100});\n            testDriver.philipsHueBridge.livingColorLampBar.setBrightnessPercent({brightnessPercent: 100});\n            testDriver.philipsHueBridge.lightBulbBedroom.setBrightnessPercent({brightnessPercent: 0});\n            testDriver.philipsHueBridge.livingColorLampBar.setRgbHex({rgbHex: \"#FF0000\"});\n\n            done();\n        });\n    });\n});\n```\n\nand run with mocha.\n\n### Using Listeners\n\nMany test cases for [thing-it-node] Plugins require listening to the Device's and Actor's reactions to Service Calls\nor just listening to Sensor Events.\n\nTo cover this in test suites you can register event listeners with the test driver e.g. as in the following mocha code\n\n```\ndescribe('Brightness = 100', function () {\n        this.timeout(5000);\n\n        before(function () {\n            testDriver.removeAllListeners();\n        });\n        it('should produce Actor State Change message', function (done) {\n            testDriver.addListener({\n                publishActorStateChange: function (device, actor, state) {\n                    if (actor.id === \"lightBulbBedroom\" && device.id === \"philipsHueBridge\" && state.brightnessPercent === 100)\n                    {\n                        done();\n                    }\n                    else\n                    {\n                        done(\"Unexpected Actor State Change message.\");\n                    }\n                }\n            });\n\n            testDriver.philipsHueBridge.lightBulbBedroom.setBrightnessPercent({brightnessPercent: 100});\n        });\n    });\n```\n\nListeners are available for\n\n* **publishMessage(message)**\n* **publishEvent(event)**\n* **publishDeviceStateChange(device, state)**\n* **publishActorStateChange(device, actor, state)**",
  "readmeFilename": "README.md",
  "gitHead": "1044bb37451b9bac7b02b1df0982e133f6f0a970",
  "_id": "thing-it-test@0.0.15",
  "scripts": {},
  "_shasum": "6bba4e71402fca49f61cd5c14bd306175bd79a19",
  "_from": "thing-it-test@*"
}
