module.exports = {
    metadata: {
        family: "dummy-device",
        plugin: "dummyDevice",
        label: "Dummy Device",
        manufacturer: "Generic",
        tangible: true,
        discoverable: true,
        state: [{
            id: "heartRate",
            label: "Heart Rate",
            type: {
                id: "number"
            },
            min: 0,
            max: 250
        }, {
            id: "bodyLocation",
            label: "Body Location",
            type: {
                id: "string"
            }
        }, {
            id: "batteryLevel",
            label: "Battery Level",
            type: {
                id: "number"
            },
            min: 0,
            max: 100
        }],
        actorTypes: [],
        sensorTypes: [],
        services: [],
        configuration: [{
            id: "criticalThresholdLow",
            label: "Critical Threshold (Low)",
            type: {
                id: "number"
            },
            defaultValue: 40
        }, {
            id: "warningThresholdLow",
            label: "Warning Threshold (Low)",
            type: {
                id: "number"
            },
            defaultValue: 50
        }, {
            id: "warningThresholdHigh",
            label: "Warning Threshold (High)",
            type: {
                id: "number"
            },
            defaultValue: 170
        }, {
            id: "criticalThresholdHigh",
            label: "Critical Threshold High",
            type: {
                id: "number"
            },
            defaultValue: 180
        }]
    },
    create: function () {
        return new DummyDevice();
    },
    discovery: function (options) {
        var discovery = new DummyDeviceDiscovery();

        discovery.options = options;

        return discovery;
    }
};

var q = require('q');

/**
 *
 * @constructor
 */
function DummyDeviceDiscovery() {
    /**
     *
     * @param options
     */
    DummyDeviceDiscovery.prototype.start = function () {
        this.interval = setInterval(function () {
            var dummyDevice = new DummyDevice();

            dummyDevice.configuration = {};
            dummyDevice.uuid = "DummyDevice" + new Date().getTime();

            this.advertiseDevice(dummyDevice);
        }.bind(this), 5000);
    };

    DummyDeviceDiscovery.prototype.stop = function () {
        clearInterval(this.interval);
    };
}

/**
 *
 */
function DummyDevice() {
    /**
     *
     */
    DummyDevice.prototype.start = function () {
        var deferred = q.defer();

        this.state = {
            heartRate: null,
            bodyLocation: null,
            batteryLevel: null
        };

        this.interval = setInterval(function () {
            this.state.heartRate = 120 + Math.floor((Math.random() * 20));
            this.state.batteryLevel = 30;
            this.state.bodyLocation = "Wrist";

            this.publishStateChange();
        }.bind(this), this.configuration.frequency * 1000);

        deferred.resolve();

        return deferred.promise;
    };

    /**
     *
     */
    DummyDevice.prototype.stop = function (state) {
        clearInterval(this.interval);
    };

    /**
     *
     */
    DummyDevice.prototype.setState = function (state) {
        this.state = state;
    };

    /**
     *
     */
    DummyDevice.prototype.getState = function () {
        return this.state;
    };
}
